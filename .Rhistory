out <- glmnet(x,y,alpha = 0)
predict(out, type='coefficients', s=bestlam,)[1:20,]
lasso.mod <- glmnet(x[train,],y[train],alpha = 1, lamdda=grid)
plot(lasso.mod)
set.seed(1)
cv.out <- cv.glmnet(x[train],y[train],alpha=1)
cv.out <- cv.glmnet(x[train,],y[train],alpha=1)
best.lam <- cv.out$lambda.min
lasso.pred <- predict(lasso.mod, s=best.lam,newx = x[test,])
mean((lasso.pred-y.test)^2)
out <- glmnet(x,y,alpha=1 lamda=grid)
out <- glmnet(x,y,alpha=1, lamda=grid)
lasso.coef <- predict(out, type='coefficient',s=bestlam)[1:20,]
lasso.coef
install.packages("pls")
library(pls)
set.seed(2)
pcr.fit <- pcr(Salary~., data=Hitters, scale=T, validation="CV")
summary(pcr.fit)
validationplot(pcr.fit, val.type = "MSEP")
set.seed(1)
pcr.fit <- pcr(Salary~.,Hitters, subset=train, scale=T, validation="CV")
pcr.fit <- pcr(Salary~.,data=Hitters[train], scale=T, validation="CV")
pcr.fit <- pcr(Salary~.,data=Hitters[train,], scale=T, validation="CV")
validationplot(pcr.fit, val.type = "MESP")
validationplot(pcr.fit, val.type = "MSEP")
pcr.pred <- predict(pc.fit, Hitters[test,] ncomp=5)
pcr.pred <- predict(pc.fit, Hitters[test,], ncomp=5)
pcr.pred <- predict(pcr.fit, Hitters[test,], ncomp=5)
mean((pcr.pred-Hitters$Salary[test])^2)
pcr.pred <- predict(pcr.fit, Hitters[test,], ncomp=7)
mean((pcr.pred-Hitters$Salary[test])^2)
set.seed(1)
pls.fit <- plsr(Salary~., data=Hitters[train,], scale=T, validation = "CV")
summary(pls.fit)
pls.pred <- predict(pls.fit, Hitters[test,] ncomp=2)
pls.pred <- predict(pls.fit, Hitters[test,], ncomp=2)
mean((pls.pred-Hitters$Salary[test])^2)
pls.fit <- plsr(Salar~.,data = HItters, scale = T, ncomp=2)
pls.fit <- plsr(Salar~.,data = Hitters, scale = T, ncomp=2)
pls.fit <- plsr(Salary~.,data = Hitters, scale = T, ncomp=2)
summary(pls.fit)
?leaps
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(pls)
library(glmnet)
library(leaps)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(pls)
library(glmnet)
library(leaps)
attach(Boston)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(MASS)
library(pls)
library(glmnet)
library(leaps)
attach(Boston)
attach(College)
set.seed(1)
train <- sample(c(T,F),nrow(College),rep=T)
test <- !train
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(MASS)
library(pls)
library(glmnet)
library(leaps)
attach(Boston)
attach(College)
set.seed(1)
train <- sample(c(T,F),nrow(College),rep=T)
test <- !train
lm.fit <- lm(Apps~., data=train)
lm.fit <- lm(Apps~., data=College$train)
lm.fit <- lm(Apps~., data=train)
lm.fit <- lm(Apps~., subset=train)
lm.fit <- lm(Apps~., data=College)
summary(lm.fit)
lm.pred <- predict(lm.fit, newdata=test)
lm.pred <- predict(lm.fit, test)
lm.pred <- predict(lm.fit, as.data.frame()test)
lm.pred <- predict(lm.fit, as.data.frame(test))
lm.err <- mean((test$Apps-lm.pred)^2)
lm.err <- mean((Apps-lm.pred)^2)
lm.err
lm.fit <- lm(Apps~., data=College)
summary(lm.fit)
lm.pred <- predict(lm.fit, as.data.frame(test))
lm.err <- mean((Apps-lm.pred)^2)
lm.err
xtrain <- model.matrix(Apps~., data=train[,-1])
train <- sample(1:nrow(x),nrow(x)/2)
xtrain <- model.matrix(Apps~., data=train[,-1])
ytrain <- train$apps
ytrain <- train$Apps
ytrain <- Apps
xtest <- model.matrix(Apps~., data=test[,-1])
ytest <- Apps
ridge.fit <- cv.glmnet(xtrain,ytrain,alpha=0)
xtrain <- model.matrix(Apps~., data=train[,])
xtrain <- model.matrix(Apps~., data=train)
xtrain <- model.matrix(Apps~., train)
xtrain <- model.matrix(Apps~., data=train)
train <- sample(c(T,F),nrow(College),rep=T)
test <- !train
xtrain <- model.matrix(Apps~., data=train)
xtrain <- model.matrix(Apps~., data=train[,])
dim(train)
train <- sample(c(T,F),nrow(Apps),rep=T)
train <- sample(c(TRUE,FALSE),nrow(Apps),rep=TRUE)
train <- sample(c(TRUE,FALSE),nrow(College$Apps),rep=TRUE)
set.seed(1)
trainindex <- sample(nrow(College, 0.75*nrow(College)))
set.seed(1)
trainindex <- sample(nrow(College), 0.75*nrow(College))
head(trainindex)
train <- College[trainindex,]
test <- College[-trainingdex,]
set.seed(1)
trainindex <- sample(nrow(College), 0.75*nrow(College))
head(trainindex)
train <- College[trainindex,]
test <- College[-trainindex,]
dim(College)
dim(train)
dim(test)
lm.fit <- lm(Apps~., data=College)
summary(lm.fit)
lm.pred <- predict(lm.fit, newdata=test)
lm.err <- mean((Apps-lm.pred)^2)
lm.err
lm.err
lm.fit <- lm(Apps~., data=train)
summary(lm.fit)
lm.pred <- predict(lm.fit, newdata=test)
lm.err <- mean((Apps-lm.pred)^2)
lm.err
lm.err <- mean((test$Apps-lm.pred)^2)
lm.err
xtrain <- model.matrix(Apps~., data=train[,-1])
ytrain <- Apps
xtest <- model.matrix(Apps~., data=test[,-1])
ytest <- Apps
ridge.fit <- cv.glmnet(xtrain,ytrain,alpha=0)
xtrain <- model.matrix(Apps~., data=train[,-1])
ytrain <- test$Apps
xtest <- model.matrix(Apps~., data=test[,-1])
ytest <- test$Apps
ridge.fit <- cv.glmnet(xtrain,ytrain,alpha=0)
xtrain <- model.matrix(Apps~., data=train[,-1])
ytrain <- train$Apps
xtest <- model.matrix(Apps~., data=test[,-1])
ytest <- test$Apps
ridge.fit <- cv.glmnet(xtrain,ytrain,alpha=0)
plot(ridge.fit)
ridge.lambda <- ridge.fit$lambda.min
ridge.lambda
ridge.pred <- predict(ridge.fit, s=ridge.lambda, newx = xtest)
ridge.err <- mean((ridge.pred-ytest)^2)
ridge.err
lasso.fit <- cv.glmnet(xtrain, ytrain, alpha=1)
plot(lasso.fit)
lasso.lambda <- lasso.fit&lambda.min
lasso.lambda <- lasso.fit$lambda.min
lasso.lambda
lasso.pred <- predict(lasso.fit, s=lasso.lambda, newx= xtest)
lasso.err <- mean((lasso.pred-ytest)^2)
lasso.err
lasso.lambda <- lasso.fit$lambda.min
lasso.lambda
lasso.pred <- predict(lasso.fit, s=lasso.lambda, newx= xtest)
lasso.err <- mean((lasso.pred-ytest)^2)
lasso.err
lasso.coef <- predict(lasso.fit, type="coeffefficients", s=lasso.lambda[1:18,])
lasso.coef <- predict(lasso.fit, type="coeffefficients", s=lasso.lambda)[1:18,]
lasso.coef <- predict(lasso.fit, type="coefficients", s=lasso.lambda)[1:18,]
lasso.coef
pcr.fit <- pcr(Apps~., data=train, scale=T, validation="CV")
validationplot(pcr.fit, val.typ="MSEP")
summary(pcr.fit)
pcr.pred <- predict(pcr.fit, test, ncom=17)
pcr.err <- mean((pcr.pred-test$Apps)^2)
pcr.err
pls.fit <- plsr(Apps~., data=train, scale=T, validation="CV")
validationplot(pls.fit, val.type = "MSEP")
summary(pls.fit)
pls.pred <- predict(pls.fit, test, ncomp=9)
pls.err <- mean((pls.pred-test$Apps)^2)
pls.err
predict.regsubsets <- function(object, newdata,id,...) {
form=as.formula(object$call[2])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id=id)
mat[, names(coefi)] %*% coefi
}
k <- 10
p <- ncol(Boston)-1
folds <- sample(rep(1:k, length = nrow(Boston)))
cv.errors <- matrix(NA,k,p)
for (i in 1:k) {
best.fit <- regsubsets(crim~., data=Boston[folds ~=i,], nvmax=p)
predict.regsubsets <- function(object, newdata,id,...) {
form=as.formula(object$call[2])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id=id)
mat[, names(coefi)] %*% coefi
}
k <- 10
p <- ncol(Boston)-1
folds <- sample(rep(1:k, length = nrow(Boston)))
cv.errors <- matrix(NA,k,p)
for (i in 1:k) {
best.fit <- regsubsets(crim~., data=Boston[folds !=i,], nvmax=p)
for (j in 1:p) {
pred <- predict(best.fit, Boston[folds ==i,], id=j)
cv.errors[i,j] <- mean((Boston$crim[folds == i]-pred)^2)
}
}
predict.regsubsets <- function(object, newdata,id,...) {
form=as.formula(object$call[2])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id=id)
mat[, names(coefi)] %*% coefi
}
k <- 10
p <- ncol(Boston)-1
folds <- sample(rep(1:k, length = nrow(Boston)))
cv.errors <- matrix(NA,k,p)
for (i in 1:k) {
best.fit <- regsubsets(crim~., data=Boston[folds !=i,], nvmax=p)
for (j in 1:p) {
pred <- predict(best.fit, Boston[folds ==i,], id=j)
cv.errors[i,j] <- mean((Boston$crim[folds == i]-pred)^2)
}
}
predict.regsubsets <- function(object, newdata,id,...) {
form=as.formula(object$call[2])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id=id)
mat[, names(coefi)] %*% coefi
}
k <- 10
p <- ncol(Boston)-1
folds <- sample(rep(1:k, length = nrow(Boston)))
cv.errors <- matrix(NA,k,p)
for (i in 1:k) {
best.fit = regsubsets(crim~., data=Boston[folds !=i,], nvmax=p)
for (j in 1:p) {
pred <- predict(best.fit, Boston[folds ==i,], id=j)
cv.errors[i,j] <- mean((Boston$crim[folds == i]-pred)^2)
}
}
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(MASS)
library(pls)
library(glmnet)
library(leaps)
attach(Boston)
attach(College)
predict.regsubsets <- function(object, newdata,id,...) {
form=as.formula(object$call[2])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id=id)
mat[, names(coefi)] %*% coefi
}
k <- 10
p <- ncol(Boston)-1
folds <- sample(rep(1:k, length = nrow(Boston)))
cv.errors <- matrix(NA,k,p)
for (i in 1:k) {
best.fit <- regsubsets(crim~., data=Boston[folds !=i,], nvmax=p)
for (j in 1:p) {
pred <- predict(best.fit, Boston[folds ==i,], id=j)
cv.errors[i,j] <- mean((Boston$crim[folds == i]-pred)^2)
}
}
predict.regsubsets <- function(object, newdata,id,...) {
form=as.formula(object$call[2])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id=id)
mat[, names(coefi)] %*% coefi
}
k <- 10
p <- ncol(Boston)-1
folds <- sample(rep(1:k, length = nrow(Boston)))
cv.errors <- matrix(NA,k,p)
for (i in 1:k) {
best.fit = regsubsets(crim ~ ., data = Boston[folds != i, ], nvmax = p)
for (j in 1:p) {
pred <- predict(best.fit, Boston[folds ==i,], id=j)
cv.errors[i,j] <- mean((Boston$crim[folds == i]-pred)^2)
}
}
predict.regsubsets <- function(object, newdata,id,...) {
form=as.formula(object$call[2])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id=id)
mat[, names(coefi)] %*% coefi
}
k <- 10
p <- ncol(Boston)-1
folds <- sample(rep(1:k, length = nrow(Boston)))
cv.errors <- matrix(NA,k,p)
for (i in 1:k) {
best.fit = regsubsets(crim ~ ., data = Boston[folds != i, ], nvmax = p)
for (j in 1:p) {
pred = predict(best.fit, Boston[folds == i, ], id = j)
cv.errors[i, j] = mean((Boston$crim[folds == i] - pred)^2)
}
}
predict.regsubsets <- function(object, newdata,id,...) {
form=as.formula(object$call[2])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id=id)
mat[, names(coefi)] %*% coefi
}
k <- 10
p <- ncol(Boston)-1
folds <- sample(rep(1:k, length = nrow(Boston)))
cv.errors <- matrix(NA,k,p)
for (i in 1:k) {
best.fit = regsubsets(crim ~ ., data = Boston[folds != i, ], nvmax = p)
for (j in 1:p) {
pred = predict(best.fit, Boston[folds == i, ], id = j)
cv.errors[i, j] = mean((Boston$crim[folds == i] - pred)^2)
}
}
k <- 10
p <- ncol(Boston)-1
folds <- sample(rep(1:k, length = nrow(Boston)))
cv.errors <- matrix(NA,k,p)
for (i in 1:k) {
best.fit <- regsubsets(crim~., data=Boston[folds !=i,], nvmax=p)
for (j in 1:p) {
pred <- predict(best.fit, Boston[folds ==i,], id=j)
cv.errors[i,j] <- mean((Boston$crim[folds == i]-pred)^2)
}
}
predict.regsubsets = function(object, newdata, id, ...) {
form = as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id = id)
mat[, names(coefi)] %*% coefi
}
k = 10
p = ncol(Boston) - 1
folds = sample(rep(1:k, length = nrow(Boston)))
cv.errors = matrix(NA, k, p)
for (i in 1:k) {
best.fit = regsubsets(crim ~ ., data = Boston[folds != i, ], nvmax = p)
for (j in 1:p) {
pred = predict(best.fit, Boston[folds == i, ], id = j)
cv.errors[i, j] = mean((Boston$crim[folds == i] - pred)^2)
}
}
rmse.cv = sqrt(apply(cv.errors, 2, mean))
plot(rmse.cv, pch = 19, type = "b")
predict.regsubsets <- function(object, newdata, id, ...) {
form <- as.formula(object$call[[2]])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id=id)
mat[, names(coefi)] %*% coefi
}
k <- 10
p <- ncol(Boston) - 1
folds <- sample(rep(1:k, length = nrow(Boston)))
cv.errors <- matrix(NA,k,p)
for (i in 1:k) {
best.fit <- regsubsets(crim ~ ., data = Boston[folds != i, ], nvmax = p)
for (j in 1:p) {
pred <- predict(best.fit, Boston[folds ==i,], id=j)
cv.errors[i,j] <- mean((Boston$crim[folds == i]-pred)^2)
}
}
rmse.cv <- sqrt(apply(cv.errors, 2, mean))
plot(rmse.cv, pch=19, type = "b")
summary(best.fit)
which.min(rmse.cv)
summary(best.fit)
which.min(rmse.cv)
boston.bsm.err <- (rmse.cv[which.min(rmse.cv)]^2)
boston.bsm.err
boston.x <- model.matrix(crim~., data = Boston)[,-1]
boston.y <- Boston$crim
boston.lasso <- cv.glmnet(boston.x,boston.y,alpha=1, type.measure ="mse")
plot(boston.lasso)
boston.x <- model.matrix(crim~., data = Boston)[,-1]
boston.y <- Boston$crim
boston.lasso <- cv.glmnet(boston.x,boston.y,alpha=1, type.measure ="mse")
plot(boston.lasso)
coef(boston.lasso)
boston.lasso.err <- (boston.lasso$cvm[boston.lasso$lambda==boston.lasso$lambda.1se])
baston.lasso.err
boston.x <- model.matrix(crim~., data = Boston)[,-1]
boston.y <- Boston$crim
boston.lasso <- cv.glmnet(boston.x,boston.y,alpha=1, type.measure ="mse")
plot(boston.lasso)
coef(boston.lasso)
boston.lasso.err <- (boston.lasso$cvm[boston.lasso$lambda==boston.lasso$lambda.1se])
boston.lasso.err
boston.ridge <- cv.glmnet(boston.x,boston.y, type.measure="mse", alpha=0)
plot.boston.ridge
boston.ridge <- cv.glmnet(boston.x,boston.y, type.measure="mse", alpha=0)
plot(boston.ridge)
coef(boston.ridge)
boston.ridge.err <- boston.ridge$cvm[boston.ridge$lambda==boston.ridge$lambda.1se]
boston.ridge.err
boston.pcr <- pcr(crim~., data=Boston, scale=T, valdiation="CV")
summary(boston.pcr)
install.packages("caret")
install.packages("modelr")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(modelr)
catalog <- read_csv(~/Data/catalog)
catalog <- read_csv(~//Data//catalog)
catalog <- read_csv("~/Data_Mining/Data/catalog.csv")
catalog <- read_csv("~/Data_Mining/Data/catalog.csv")
str(catalog)
catalog <- read_csv("~/Data_Mining/Data/catalog.csv")
str(catalog)
catalog$CollGifts<-as_factor(catalog$CollGifts)
catalog$BricMortar<-as_factor(catalog$BricMortar)
catalog$MarthaHome<-as_factor(catalog$MarthaHome)
catalog$SunAds<-as_factor(catalog$SunAds)
catalog$ThemeColl<-as_factor(catalog$ThemeColl)
catalog$CustDec<-as_factor(catalog$CustDec)
catalog$RetailKids<-as_factor(catalog$RetailKids)
catalog$TeenWr<-as_factor(catalog$TeenWr)
catalog$Carlovers<-as_factor(catalog$Carlovers)
catalog$CountryColl<-as_factor(catalog$CountryColl)
str(catalog)
cat.clean <- filter(catalog, Age>=18, LenRes<=Age)
dim(cat.clean)
summary(cat.clean)
cat.clean %>%
ggplot(aes(x=log(SpendRat))) + geom_histogram()
train_control <- trainControl((method = "repeatedc", number = 10, repeats = 3))
train_control <- trainControl((method = "repeatedcv", number = 10, repeats = 3))
## Set up Repeated k-fold Cross Validation
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
lm.fit<-train(log(SpendRat)~., data=cat.clean, trControl=train_control,method='lm')
print(lm.fit)
y_train=log(cat.clean$SpendRat)
X_train=model_matrix(cat.clean,log(SpendRat)~Age+LenRes+Income+TotAsset+SecAssets+ShortLiq+LongLiq+WlthIdx+SpendVol+SpenVel+CollGifts+BricMortar+MarthaHome+SunAds+ThemeColl+CustDec+RetailKids+TeenWr+Carlovers+CountryColl)
parameters <- c(seq(0.1, 2, by =0.1) ,  seq(2, 5, 0.5) , seq(5, 25, 1))
ridge.fit<-train(y=y_train,x=X_train,method='glmnet',trControl=train_control,tuneGrid=expand.grid(alpha=0,lambda = parameters))
print(ridge.fit)
y_train=log(cat.clean$SpendRat)
X_train=model_matrix(cat.clean,log(SpendRat)~Age+LenRes+Income+TotAsset+SecAssets+ShortLiq+LongLiq+WlthIdx+SpendVol+SpenVel+CollGifts+BricMortar+MarthaHome+SunAds+ThemeColl+CustDec+RetailKids+TeenWr+Carlovers+CountryColl)
parameters <- c(seq(0.1, 2, by =0.1) ,  seq(2, 5, 0.5) , seq(5, 25, 1))
lasso.fit<-train(y=y_train,x=X_train,method='glmnet',trControl=train_control,tuneGrid=expand.grid(alpha=1,lambda = parameters))
print(lasso.fit)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(modelr)
set.seed(303)
catalog <- read_csv("~/Data_Mining/Data/catalog.csv")
str(catalog)
catalog$CollGifts<-as_factor(catalog$CollGifts)
catalog$BricMortar<-as_factor(catalog$BricMortar)
catalog$MarthaHome<-as_factor(catalog$MarthaHome)
catalog$SunAds<-as_factor(catalog$SunAds)
catalog$ThemeColl<-as_factor(catalog$ThemeColl)
catalog$CustDec<-as_factor(catalog$CustDec)
catalog$RetailKids<-as_factor(catalog$RetailKids)
catalog$TeenWr<-as_factor(catalog$TeenWr)
catalog$Carlovers<-as_factor(catalog$Carlovers)
catalog$CountryColl<-as_factor(catalog$CountryColl)
str(catalog)
cat.clean <- filter(catalog, Age>=18, LenRes<=Age)
dim(cat.clean)
summary(cat.clean)
cat.clean %>%
ggplot(aes(x=log(SpendRat))) + geom_histogram()
## Set up Repeated k-fold Cross Validation
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
lm.fit<-train(log(SpendRat)~., data=cat.clean, trControl=train_control,method='lm')
print(lm.fit)
y_train=log(cat.clean$SpendRat)
X_train=model_matrix(cat.clean,log(SpendRat)~Age+LenRes+Income+TotAsset+SecAssets+ShortLiq+LongLiq+WlthIdx+SpendVol+SpenVel+CollGifts+BricMortar+MarthaHome+SunAds+ThemeColl+CustDec+RetailKids+TeenWr+Carlovers+CountryColl)
parameters <- c(seq(0.1, 2, by =0.1) ,  seq(2, 5, 0.5) , seq(5, 25, 1))
ridge.fit<-train(y=y_train,x=X_train,method='glmnet',trControl=train_control,tuneGrid=expand.grid(alpha=0,lambda = parameters))
print(ridge.fit)
y_train=log(cat.clean$SpendRat)
X_train=model_matrix(cat.clean,log(SpendRat)~Age+LenRes+Income+TotAsset+SecAssets+ShortLiq+LongLiq+WlthIdx+SpendVol+SpenVel+CollGifts+BricMortar+MarthaHome+SunAds+ThemeColl+CustDec+RetailKids+TeenWr+Carlovers+CountryColl)
parameters <- c(seq(0.1, 2, by =0.1) ,  seq(2, 5, 0.5) , seq(5, 25, 1))
lasso.fit<-train(y=y_train,x=X_train,method='glmnet',trControl=train_control,tuneGrid=expand.grid(alpha=1,lambda = parameters))
print(lasso.fit)
pcr.fit<-train(log(SpendRat)~., data=cat.clean, trControl=train_control,tuneLength=ncol(cat.clean),method='pcr')
plot(pcr.fit)
pcr.fit$bestTune
print(pcr.fit)
pls.fit<-train(log(SpendRat)~., data=cat.clean, trControl=train_control,tuneLength=ncol(cat.clean),method='pls')
plot(pls.fit)
pls.fit$bestTune
print(pls.fit)
library(ISLR)
attach(wage)
library(ISLR)
attach(wage)
library(ISLR)
attach(wage)
library(ISLR)
attach(wage)
